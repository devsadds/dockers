#!/bin/bash

#
# Run the OpenVPN server normally
#

if [ "$DEBUG" == "1" ]; then
  set -x
fi

set -e

cd $OPENVPN

# Build runtime arguments array based on environment
USER_ARGS=("${@}")
ARGS=()

# Checks if ARGS already contains the given value
function hasArg {
    local element
    for element in "${@:2}"; do
        [ "${element}" == "${1}" ] && return 0
    done
    return 1
}

# Adds the given argument if it's not already specified.
function addArg {
    local arg="${1}"
    [ $# -ge 1 ] && local val="${2}"
    if ! hasArg "${arg}" "${USER_ARGS[@]}"; then
        ARGS+=("${arg}")
        [ $# -ge 1 ] && ARGS+=("${val}")
    fi
}

# set up iptables rules and routing
# this allows rules/routing to be altered by supplying this function
# in an included file, such as ovpn_env.sh
function setupIptablesAndRouting {
    iptables -t nat -C POSTROUTING -s $OVPN_SERVER -o $OVPN_NATDEVICE -j MASQUERADE || {
      iptables -t nat -A POSTROUTING -s $OVPN_SERVER -o $OVPN_NATDEVICE -j MASQUERADE
    }
    for i in "${OVPN_ROUTES[@]}"; do
        iptables -t nat -C POSTROUTING -s "$i" -o $OVPN_NATDEVICE -j MASQUERADE || {
          iptables -t nat -A POSTROUTING -s "$i" -o $OVPN_NATDEVICE -j MASQUERADE
        }
    done
}


addArg "--config" "$OPENVPN/openvpn.conf"

source "$OPENVPN/ovpn_env.sh"

mkdir -p /dev/net
if [ ! -c /dev/net/tun ]; then
    mknod /dev/net/tun c 10 200
fi

if [ -d "$OPENVPN/ccd" ]; then
    addArg "--client-config-dir" "$OPENVPN/ccd"
fi

# When using --net=host, use this to specify nat device.
[ -z "$OVPN_NATDEVICE" ] && OVPN_NATDEVICE=eth0

# Setup NAT forwarding if requested
if [ "$OVPN_DEFROUTE" != "0" ] || [ "$OVPN_NAT" == "1" ] ; then
	# call function to setup iptables rules and routing
	# this allows rules to be customized by supplying
	# a replacement function in, for example, ovpn_env.sh
	setupIptablesAndRouting
fi

# Use a copy of crl.pem as the CRL Needs to be readable by the user/group
# OpenVPN is running as.  Only pass arguments to OpenVPN if it's found.
if [ "$EASYRSA_PKI/crl.pem" -nt "$OPENVPN/crl.pem" ]; then
    cp -f "$EASYRSA_PKI/crl.pem" "$OPENVPN/crl.pem"
    chmod 644 "$OPENVPN/crl.pem"
fi

if [ -r "$OPENVPN/crl.pem" ]; then
    addArg "--crl-verify" "$OPENVPN/crl.pem"
fi

ip -6 route show default 2>/dev/null
if [ $? = 0 ]; then
    echo "Enabling IPv6 Forwarding"
    # If this fails, ensure the docker container is run with --privileged
    # Could be side stepped with `ip netns` madness to drop privileged flag

    sysctl -w net.ipv6.conf.all.disable_ipv6=0 || echo "Failed to enable IPv6 support"
    sysctl -w net.ipv6.conf.default.forwarding=1 || echo "Failed to enable IPv6 Forwarding default"
    sysctl -w net.ipv6.conf.all.forwarding=1 || echo "Failed to enable IPv6 Forwarding"
fi
if [ ! -f "/etc/openvpn/vars" ];then
    touch /etc/openvpn/vars
else
    echo "File /etc/openvpn/vars exist"

fi



openvpn_run(){
echo "Running 'openvpn ${ARGS[@]} ${USER_ARGS[@]}'"
exec openvpn ${ARGS[@]} ${USER_ARGS[@]}

}


supervisord_init(){
echo "exec funct ${FUNCNAME}"
if [[ ! -d "/etc/supervisor.d/" ]];then
    mkdir -p /etc/supervisor.d/
fi
cat <<OEF> /etc/supervisor.d/openvpn.ini
[supervisord]
nodaemon=true

[program:openvpn]
command=/usr/sbin/openvpn ${ARGS[@]} ${USER_ARGS[@]}
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
startretries=140
stopwaitsecs=10
user=root
priority=50
OEF

if [[ "${SERVICE_DNSMASQ}" == "true" ]];then
cat <<OEF> /etc/supervisor.d/dnsmasq.ini
[supervisord]
nodaemon=true

[program:dnsmasq]
command=/usr/sbin/dnsmasq --no-daemon
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
startretries=140
stopwaitsecs=10
priority=999
user=root
OEF
DNSMASQ_LISTEN_INTERFACE_DEFAULT=$(cat /etc/openvpn/openvpn.conf  | grep '^dev.*tun.*' |  awk '{print $2}')
echo "" > /etc/dnsmasq.conf
echo "listen-address=${DNSMASQ_LISTEN_ADDRESS:-0.0.0.0}" >> /etc/dnsmasq.conf
echo "interface=${DNSMASQ_LISTEN_INTERFACE:-${DNSMASQ_LISTEN_INTERFACE_DEFAULT}}" >> /etc/dnsmasq.conf
echo "user=${DNSMASQ_RUN_USER:-root}" >> /etc/dnsmasq.conf
echo "server=${DNSMASQ_DNS_SERVER:-8.8.8.8}" >> /etc/dnsmasq.conf
echo "conf-dir=/etc/dnsmasq.d/,*.conf" >> /etc/dnsmasq.conf
fi


}



supervisor_start(){
    echo "exec funct ${FUNCNAME}"
    /usr/bin/supervisord -c /etc/supervisord.conf
}


supervisord_init
supervisor_start