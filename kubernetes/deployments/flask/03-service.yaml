apiVersion: v1
kind: Service
metadata:
  name: svc-flask
  namespace: production
  labels:
    node.role: worker
  annotations:
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
    service.beta.kubernetes.io/do-loadbalancer-size-slug: "lb-large"
    service.beta.kubernetes.io/do-loadbalancer-protocol: "tcp"
    #service.beta.kubernetes.io/do-loadbalancer-healthcheck-port: "81"
    #service.beta.kubernetes.io/do-loadbalancer-healthcheck-protocol: "http"
    #service.beta.kubernetes.io/do-loadbalancer-healthcheck-path: "/health"
    #service.beta.kubernetes.io/do-loadbalancer-healthcheck-check-interval-seconds: "3"
    #service.beta.kubernetes.io/do-loadbalancer-healthcheck-response-timeout-seconds: "5"
    #service.beta.kubernetes.io/do-loadbalancer-healthcheck-unhealthy-threshold: "3"
    #service.beta.kubernetes.io/do-loadbalancer-healthcheck-healthy-threshold: "5"

spec:
  type: LoadBalancer # NodePort,LoadBalancer,ClusterIP,ExternalName
  externalTrafficPolicy: Local # expose or not on external ip Nodeport. Values:  Cluster,Local
  selector:
    node.role: worker
  ports:
  - name: flask-80-tcp
    protocol: TCP
    port: 80
    targetPort: flask-80-tcp
  - name: flask-81-tcp
    protocol: TCP
    port: 81
    targetPort: flask-81-tcp

---
apiVersion: v1
kind: Service
metadata:
  name: ext-flask
  namespace: production
  labels:
    node.role: worker
  annotations:
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
spec:
  type: LoadBalancer
  externalTrafficPolicy: Cluster
  selector:
    node.role: worker
  ports:
    - name: flask-80-tcp
      protocol: TCP
      port: 80
      targetPort: flask-80-tcp
    - name: flask-81-tcp
      protocol: TCP
      port: 81
      targetPort: flask-81-tcp
  externalIPs:
    - 192.168.122.153
    - 192.168.122.152